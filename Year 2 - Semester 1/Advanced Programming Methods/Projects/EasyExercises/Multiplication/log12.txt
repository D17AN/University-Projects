ID: 1
Execution Stack:
int v1|int v2|int v3|v1 = 2|v2 = 3|if(v1 != 0){v3 = MUL(v1, v2)}else{Print(v1)}
SymbolTable:
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
int v2|int v3|v1 = 2|v2 = 3|if(v1 != 0){v3 = MUL(v1, v2)}else{Print(v1)}
int v1
SymbolTable:
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
int v2|int v3|v1 = 2|v2 = 3|if(v1 != 0){v3 = MUL(v1, v2)}else{Print(v1)}
int v1
SymbolTable:
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
int v2|int v3|v1 = 2|v2 = 3|if(v1 != 0){v3 = MUL(v1, v2)}else{Print(v1)}
SymbolTable:
v1 -> 0
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
int v2|int v3|v1 = 2|v2 = 3|if(v1 != 0){v3 = MUL(v1, v2)}else{Print(v1)}
SymbolTable:
v1 -> 0
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
int v3|v1 = 2|v2 = 3|if(v1 != 0){v3 = MUL(v1, v2)}else{Print(v1)}
int v2
SymbolTable:
v1 -> 0
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
int v3|v1 = 2|v2 = 3|if(v1 != 0){v3 = MUL(v1, v2)}else{Print(v1)}
int v2
SymbolTable:
v1 -> 0
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
int v3|v1 = 2|v2 = 3|if(v1 != 0){v3 = MUL(v1, v2)}else{Print(v1)}
SymbolTable:
v1 -> 0
v2 -> 0
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
int v3|v1 = 2|v2 = 3|if(v1 != 0){v3 = MUL(v1, v2)}else{Print(v1)}
SymbolTable:
v1 -> 0
v2 -> 0
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
v1 = 2|v2 = 3|if(v1 != 0){v3 = MUL(v1, v2)}else{Print(v1)}
int v3
SymbolTable:
v1 -> 0
v2 -> 0
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
v1 = 2|v2 = 3|if(v1 != 0){v3 = MUL(v1, v2)}else{Print(v1)}
int v3
SymbolTable:
v1 -> 0
v2 -> 0
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
v1 = 2|v2 = 3|if(v1 != 0){v3 = MUL(v1, v2)}else{Print(v1)}
SymbolTable:
v1 -> 0
v2 -> 0
v3 -> 0
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
v1 = 2|v2 = 3|if(v1 != 0){v3 = MUL(v1, v2)}else{Print(v1)}
SymbolTable:
v1 -> 0
v2 -> 0
v3 -> 0
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
v2 = 3|if(v1 != 0){v3 = MUL(v1, v2)}else{Print(v1)}
v1 = 2
SymbolTable:
v1 -> 0
v2 -> 0
v3 -> 0
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
v2 = 3|if(v1 != 0){v3 = MUL(v1, v2)}else{Print(v1)}
v1 = 2
SymbolTable:
v1 -> 0
v2 -> 0
v3 -> 0
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
v2 = 3|if(v1 != 0){v3 = MUL(v1, v2)}else{Print(v1)}
SymbolTable:
v1 -> 2
v2 -> 0
v3 -> 0
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
v2 = 3|if(v1 != 0){v3 = MUL(v1, v2)}else{Print(v1)}
SymbolTable:
v1 -> 2
v2 -> 0
v3 -> 0
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
if(v1 != 0){v3 = MUL(v1, v2)}else{Print(v1)}
v2 = 3
SymbolTable:
v1 -> 2
v2 -> 0
v3 -> 0
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
if(v1 != 0){v3 = MUL(v1, v2)}else{Print(v1)}
v2 = 3
SymbolTable:
v1 -> 2
v2 -> 0
v3 -> 0
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
if(v1 != 0){v3 = MUL(v1, v2)}else{Print(v1)}
SymbolTable:
v1 -> 2
v2 -> 3
v3 -> 0
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
if(v1 != 0){v3 = MUL(v1, v2)}else{Print(v1)}
SymbolTable:
v1 -> 2
v2 -> 3
v3 -> 0
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
v3 = MUL(v1, v2)
SymbolTable:
v1 -> 2
v2 -> 3
v3 -> 0
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
v3 = MUL(v1, v2)
SymbolTable:
v1 -> 2
v2 -> 3
v3 -> 0
Output list:
File table:
Heap memory:

ID: 1
Execution Stack:
SymbolTable:
v1 -> 2
v2 -> 3
v3 -> -1
Output list:
File table:
Heap memory:

