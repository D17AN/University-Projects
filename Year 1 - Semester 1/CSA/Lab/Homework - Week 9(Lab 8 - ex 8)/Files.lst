     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fread, printf  ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import fopen msvcrt.dll 
    11                                  import fread msvcrt.dll 
    12                                  import fclose msvcrt.dll
    13                                  import printf msvcrt.dll
    14                                  
    15                                  ; PROBLEM STATEMENT                     
    16                                  ; A text file is given. Read the content of the file, determine the uppercase letter with the 
    17                                  ; highest frequency and display the letter along with its frequency on the screen.
    18                                  ; The name of text file is defined in the data segment.
    19                                  
    20                                  
    21                                  ; our data is declared here (the variables needed by our program)
    22                                  segment data use32 class=data
    23 00000000 6669736965722E7478-         file_name db "fisier.txt", 0
    23 00000009 7400               
    24 0000000B 7200                        acces_mode db "r", 0
    25 0000000D FFFFFFFF                    file_descriptor dd -1; a reference to the file 
    26                                      len equ 1; the maximum number of characters read in a stage
    27 00000011 <res 00000001>              buffer resb len; the character which is read
    28 00000012 00000000                    nr_characters dd 0
    29 00000016 2563202D2025642074-         format db "%c - %d times", 13, 10, 0
    29 0000001F 696D65730D0A00     
    30 00000026 00000000<rept>              frequency_array times 26 dd 0; reserve 26 positions for the frequency array
    31 0000008E FFFFFFFF                    max1 dd -1
    32                                      
    33                                      
    34                                  ; our code starts here
    35                                  segment code use32 class=code
    36                                      start:
    37 00000000 68[0B000000]                    push dword acces_mode
    38 00000005 68[00000000]                    push dword  file_name
    39 0000000A FF15[00000000]                  call [fopen]
    40 00000010 83C408                          add esp, 4*2
    41                                          
    42 00000013 83F800                          cmp eax, 0; if the file was opened then eax != 0, otherwise eax = 0
    43 00000016 0F84AC000000                    je end_program
    44 0000001C A3[0D000000]                    mov [file_descriptor], eax; save the value returned by fopen 
    45                                          
    46                                          my_loop:
    47 00000021 FF35[0D000000]                      push dword[file_descriptor]
    48 00000027 6A01                                push dword len
    49 00000029 6A01                                push dword 1
    50 0000002B 68[11000000]                        push dword buffer
    51 00000030 FF15[00000000]                      call [fread]
    52 00000036 83C410                              add esp, 4*4
    53                                              
    54 00000039 83F800                              cmp eax, 0; in eax will be stored the number of read characters // if it's zero than we reached the end of the file
    55 0000003C 7421                                je cleanup
    56                                              
    57 0000003E A3[12000000]                        mov [nr_characters], eax ; save the number of read characters
    58                                              ; instructions
    59 00000043 A0[11000000]                        mov al, byte[buffer]
    60 00000048 3C41                                cmp al, 'A'; if al < 'A'
    61 0000004A 7C11                                jl end_if
    62 0000004C 3C5A                                cmp al, 'Z'; if al > 'Z'
    63 0000004E 7F0D                                jg end_if
    64                                              valid: ;if 'A' <= al <= 'Z
    65 00000050 2C41                                   sub al, 'A'
    66 00000052 6698                                   cbw
    67 00000054 6699                                   cwd
    68 00000056 FF0485[26000000]                       inc dword[frequency_array + eax*4]
    69                                              end_if:
    70                                              
    71                                              ;end instructions
    72 0000005D EBC2                                jmp my_loop
    73                                         
    74                                          
    75                                          cleanup:
    76 0000005F FF35[0D000000]                      push dword [file_descriptor]
    77 00000065 FF15[00000000]                      call [fclose]
    78 0000006B 83C404                              add esp, 4
    79                                          
    80                                          ;find the maximum from a frequency array
    81 0000006E B91A000000                      mov ecx, 26
    82 00000073 BE00000000                      mov esi, 0  
    83 00000078 E318                            jecxz end_for1
    84                                          start_for1:
    85 0000007A 8B1CB5[26000000]                    mov ebx,[frequency_array+esi*4]
    86 00000081 3B1D[8E000000]                      cmp ebx, dword[max1]
    87 00000087 7E06                                jng not_max
    88 00000089 891D[8E000000]                      mov dword [max1], ebx
    89                                              not_max:
    90 0000008F 46                                  inc esi 
    91 00000090 E2E8                            loop start_for1
    92                                          end_for1:
    93                                          
    94 00000092 B91A000000                      mov ecx, 26
    95 00000097 BE00000000                      mov esi, 0
    96 0000009C B841000000                      mov eax, 'A'  
    97 000000A1 E325                            jecxz end_for
    98                                          start_for:  
    99                                              ;printf("%c - %d times", c, d)
   100 000000A3 8B1CB5[26000000]                    mov ebx,[frequency_array+esi*4]
   101 000000AA 3B1D[8E000000]                      cmp ebx, dword[max1]
   102 000000B0 7512                                jne not_max2
   103 000000B2 60                                  pushad
   104 000000B3 53                                  push ebx
   105 000000B4 50                                  push eax
   106 000000B5 68[16000000]                        push dword format
   107 000000BA FF15[00000000]                      call [printf]
   108 000000C0 83C40C                              add esp, 4*3
   109 000000C3 61                                  popad
   110                                              not_max2:
   111 000000C4 40                                  inc eax 
   112 000000C5 46                                  inc esi 
   113 000000C6 E2DB                            loop start_for
   114                                          end_for:
   115                                          
   116                                          end_program:
   117                                          ; exit(0)
   118 000000C8 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   119 000000CA FF15[00000000]                  call    [exit]       ; call exit to terminate the program
