     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import scanf msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  ;A natural number a (a: dword, defined in the data segment) is given. 
    13                                  ;Read a natural number b from the keyboard and calculate: a + a/b. 
    14                                  ;Display the result of this operation. The values will be displayed in decimal format (base 10) with sign.
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17 00000000 14000000                    a dd 20
    18 00000004 00000000                    b dd 0
    19 00000008 62203D2000                  format_message db "b = ", 0
    20 0000000D 256400                      format db "%d", 0
    21 00000010 2564202B2025642F25-         message db "%d + %d/%d = %d", 0
    21 00000019 64203D20256400     
    22 00000020 6469766973696F6E20-         error_message db "division with zero forbidden!", 0
    22 00000029 77697468207A65726F-
    22 00000032 20666F726269646465-
    22 0000003B 6E2100             
    23                                      
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27 00000000 68[08000000]                    push dword format_message
    28 00000005 FF15[00000000]                  call [printf]
    29 0000000B 83C404                          add esp, 4*1
    30                                          
    31 0000000E 68[04000000]                    push dword b
    32 00000013 68[0D000000]                    push dword format 
    33 00000018 FF15[00000000]                  call [scanf]
    34 0000001E 83C408                          add esp, 4*2
    35                                          
    36 00000021 A1[04000000]                    mov eax, dword[b]
    37 00000026 83F800                          cmp eax, 0
    38 00000029 743C                            je ZeroDivision
    39                                          
    40 0000002B F8                              clc
    41 0000002C A1[00000000]                    mov eax, dword[a]
    42 00000031 99                              cdq; eax -> edx:eax
    43 00000032 F73D[04000000]                  idiv dword[b]; eax = edx:eax / b, edx = edx:eax % b
    44 00000038 1305[00000000]                  adc eax, dword[a]; eax = a + eax = a + a / b 
    45                                          
    46 0000003E 50                              push eax
    47 0000003F FF35[04000000]                  push dword[b]
    48 00000045 FF35[00000000]                  push dword[a]
    49 0000004B FF35[00000000]                  push dword[a]
    50 00000051 68[10000000]                    push dword message
    51 00000056 FF15[00000000]                  call [printf]
    52 0000005C 83C414                          add esp, 4*5
    53                                            
    54                                          ;exit(0)
    55 0000005F 6A00                            push dword 0
    56 00000061 FF15[00000000]                  call [exit] 
    57                                          
    58                                          ZeroDivision:
    59 00000067 68[20000000]                    push error_message
    60 0000006C FF15[00000000]                  call[printf]
    61                                       
    62                                          ; exit(0)
    63 00000072 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    64 00000074 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
