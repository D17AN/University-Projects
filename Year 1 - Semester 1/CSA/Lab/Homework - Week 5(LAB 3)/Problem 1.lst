     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ;a - byte, b - word, c - double word, d - qword - Unsigned representation
    14 00000000 7F                          a db 127
    15 00000001 2C01                        b dw 300
    16 00000003 2D00000000000000            d dq 45
    17 0000000B <res 00000008>              r resq 1; reserve 1 quadword in memory to save the result
    18                                      
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ;Problem statement (a+b-d)+(a-b-d) => (127 + 300 - 45) + (127 - 300 - 45) = 164
    24                                          
    25                                          
    26                                          ;Computing (a+b-d)
    27 00000000 A0[00000000]                    mov AL, [a]; AL = a
    28 00000005 B400                            mov AH, 0; converting AL to AX/byte to word
    29                                          
    30 00000007 660305[01000000]                add AX, [b]; AX = AX + b = a + b 
    31                                          
    32 0000000E 66BA0000                        mov DX, 0; converting AX to DX:AX/word to double word
    33                                          
    34 00000012 6652                            push DX; push the high part to the stack
    35 00000014 6650                            push AX; push the low part to the stack
    36 00000016 58                              pop EAX; EAX = DX:AX = a + b
    37                                          
    38 00000017 BA00000000                      mov EDX, 0; converting EAX to EDX:EAX/double word to quadword 
    39                                          
    40 0000001C 2B05[03000000]                  sub EAX, dword [d]
    41 00000022 1B15[07000000]                  sbb EDX, dword [d+4]; EDX:EAX = a + b - d
    42                                          
    43                                          ;Computing (a-b-d)
    44 00000028 8A1D[00000000]                  mov BL, [a]; BL = a
    45 0000002E B700                            mov BH, 0; converting BL to BX/ byte to word 
    46                                          
    47 00000030 662B1D[01000000]                sub BX, [b]; BX = BX - b = a - b
    48                                          
    49 00000037 66B90000                        mov CX, 0; converting BX to CX:BX/ word to a double word
    50                                  
    51 0000003B 6651                            push CX; push the high part to the stack
    52 0000003D 6653                            push BX; push the low part to the stack
    53 0000003F 5B                              pop EBX; EBX = CX:BX = a + b
    54                                          
    55 00000040 B900000000                      mov ECX, 0; converting EBX to ECX:EBX/ double word to quadword 
    56                                          
    57 00000045 2B1D[03000000]                  sub EBX, dword [d]
    58 0000004B 1B0D[07000000]                  sbb ECX, dword[d+4]; ECX:EBX = a - b - d
    59                                          
    60                                          ;Computing (a+b-d)+(a-b-d)
    61 00000051 F8                              clc; clear the carry flag(CF = 0)
    62 00000052 01D8                            add EAX, EBX; EAX = EAX + EBX
    63 00000054 11CA                            adc EDX, ECX; EDX = EDX + ECX + CF
    64                                          
    65                                          ;EDX:EAX has the result 
    66 00000056 A3[0B000000]                    mov dword[r], EAX
    67 0000005B 8915[0F000000]                  mov dword[r+4], EDX
    68                                          
    69                                          ; exit(0)
    70 00000061 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    71 00000063 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
    72                                          
