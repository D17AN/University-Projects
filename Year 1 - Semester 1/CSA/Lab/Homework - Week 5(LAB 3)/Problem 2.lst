     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; a - byte, b - word, c - double word, d - qword - Signed representation
    14 00000000 05                          a db 5
    15 00000001 0500                        b dw 5
    16 00000003 06000000                    c dd 6
    17 00000007 0700000000000000            d dq 7
    18 0000000F <res 00000008>              r resq 1
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; Problem statement(b+c+d)-(a+a)
    24                                          ;Compute (b + c + d)
    25 00000000 66A1[01000000]                  mov AX, [b]
    26 00000006 98                              cwde; converting AX to EAX
    27                                          
    28 00000007 0305[03000000]                  add EAX, [c];EAX = EAX + c
    29                                          
    30 0000000D 99                              cdq; converting EAX to EDX:EAX
    31                                          
    32 0000000E F8                              clc; clear the carry flag
    33 0000000F 0305[07000000]                  add EAX, dword [d]; 
    34 00000015 1315[0B000000]                  adc EDX, dword [d+4]; EDX:EAX = EDX:EAX + d = b + c + d
    35                                          
    36 0000001B A3[0F000000]                    mov dword[r], EAX
    37 00000020 8915[13000000]                  mov dword[r+4], EDX; r = EDX:EAX
    38                                          
    39 00000026 A0[00000000]                    mov AL, [a]
    40 0000002B 0205[00000000]                  add AL, [a]
    41 00000031 6698                            cbw; convert AL to AX
    42 00000033 98                              cwde; convert AX to EAX
    43 00000034 99                              cdq; convert EAX to EDX:EAX 
    44                                          
    45 00000035 2905[0F000000]                  sub dword [r], EAX
    46 0000003B 1915[13000000]                  sbb dword [r+4], EDX; r = b + c + d - (a + a)
    47                                          
    48                                          ; exit(0)
    49 00000041 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 00000043 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
    51                                          
