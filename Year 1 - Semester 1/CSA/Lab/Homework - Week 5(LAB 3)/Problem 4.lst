     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                  ; a,b-word; c,d-byte; e-doubleword; x-qword  - Signed represantation 
    14 00000000 0100                        a dw 1
    15 00000002 0100                        b dw 1
    16 00000004 01                          c db 1 
    17 00000005 01                          d db 1 
    18 00000006 01000000                    e dd 1 
    19 0000000A 0100000000000000            x dq 1 
    20 00000012 <res 00000002>              var resw 1
    21 00000014 <res 00000004>              r resd 1
    22                                      
    23                                  
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:        
    27                                          ; Problem statement  1/a+200*b-c/(d+1)+x/a-e ;
    28                                          ; double size/ size -> size 
    29 00000000 B001                            mov AL, 1
    30 00000002 6698                            cbw; converts AL to AX
    31 00000004 6699                            cwd; converts AX to DX:AX 
    32 00000006 66F73D[00000000]                idiv word [a]; AX = DX:AX / a = 1 / a
    33 0000000D 66A3[12000000]                  mov [var], AX; var = AX = 1 / a
    34                                          
    35 00000013 66B8C800                        mov AX, 200;  AX = 200
    36 00000017 66F72D[02000000]                imul word [b]; DX:AX = AX * b = 200 * b
    37 0000001E 6689D1                          mov CX, DX; CX = DX 
    38 00000021 6689C3                          mov BX, AX; BX = AX 
    39                                          
    40 00000024 66A1[12000000]                  mov AX, [var]; AX = var 
    41 0000002A 6699                            cwd; converts AX to DX:AX 
    42                                          
    43 0000002C F8                              clc; clear CF 
    44 0000002D 6601C3                          add BX, AX
    45 00000030 6611D1                          adc CX, DX; CX:BX = CX:BX + DX:AX = 1 / a + 200*b
    46                                          
    47 00000033 A0[04000000]                    mov AL, [c]; AL = c 
    48 00000038 6698                            cbw; converts AL to AX 
    49 0000003A 8A15[05000000]                  mov DL, [d]; DL = d
    50 00000040 80C201                          add DL, 1; DL = DL + 1 = d + 1
    51 00000043 F6FA                            idiv DL; AL = AX / DL = c / (d + 1)
    52                                          
    53 00000045 6698                            cbw; converts AL to AX
    54 00000047 6699                            cwd; converts AX to DX:AX
    55                                          
    56 00000049 6629C3                          sub BX, AX
    57 0000004C 6619D1                          sbb CX, DX; CX:BX = CX:BX - DX:AX = 1 / a + 200*b - c / (d+1)
    58                                          
    59 0000004F 66891D[14000000]                mov word [r], BX
    60 00000056 66890D[16000000]                mov word [r+2], CX; r = CX:BX 
    61                                          ;push CX
    62                                          ;push BX
    63                                          ;pop ESP; ESP = CX:BX = 1 / a + 200*b - c / (d+1)
    64                                          
    65 0000005D 66A1[00000000]                  mov AX, [a]; AX = a
    66 00000063 98                              cwde; converts AX to EAX
    67 00000064 89C3                            mov EBX, EAX; EBX = EAX
    68                                          
    69 00000066 A1[0A000000]                    mov EAX, dword [x]
    70 0000006B 8B15[0E000000]                  mov EDX, dword [x+4]; EDX:EAX = x
    71                                          
    72 00000071 F7FB                            idiv EBX; EAX = EDX:EAX / EBX = x / a
    73                                          
    74 00000073 50                              push EAX
    75 00000074 6658                            pop AX
    76 00000076 665A                            pop DX ; DX:AX = EAX = x / a 
    77                                          
    78 00000078 668B1D[14000000]                mov BX, word [r]
    79 0000007F 668B0D[16000000]                mov CX, word [r+2]
    80                                          ;push ESP
    81                                          ;pop BX
    82                                          ;pop CX ; CX:BX = ESP = 1 / a + 200*b - c / (d+1)
    83                                          
    84 00000086 F8                              clc; clear CF
    85 00000087 6601C3                          add BX, AX
    86 0000008A 6611D1                          adc CX, DX; CX:BX = CX:BX + DX:AX = 1 / a + 200*b - c / (d+1) + x / a 
    87                                          
    88 0000008D 662B1D[06000000]                sub BX, word [e]
    89 00000094 661B0D[08000000]                sbb CX, word [e+2]; CX:BX = CX:BX - e = 1 / a + 200*b - c / (d+1) + x / a - e
    90                                          
    91                                          
    92                                          ; exit(0)
    93 0000009B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    94 0000009D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
    95                                          
