     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ;A character string S is given. Obtain the string D that contains all capital letters of the string S
    12                                  ;Example:
    13                                  ;S: 'a', 'A', 'b', 'B', '2', '%', 'x', 'M'
    14                                  ;D: 'A', 'B', 'M'
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18 00000000 614162423225784D            S db 'a', 'A', 'b', 'B', '2', '%', 'x', 'M'; declare string of bytes 
    19                                      lenght equ $-S; compute the lenght of the string in lenght
    20 00000008 00<rept>                    D times lenght db 0; reserve lenght bytes for the destination string and initialize it
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25 00000000 B908000000                      mov ecx, lenght
    26 00000005 BE00000000                      mov esi, 0; esi -> represents the current index in string S
    27 0000000A BA00000000                      mov edx, 0; edx -> represents the current index of string D
    28                                          
    29 0000000F E318                            jecxz end_program
    30                                          repeat_label:
    31 00000011 8A86[00000000]                          mov al, [S+esi]; al = S at the index esi 
    32 00000017 3C41                                    cmp al, 'A'; if al < 'A'
    33 00000019 7C0B                                    jl end_if
    34 0000001B 3C5A                                    cmp al, 'Z'; if al > 'Z'
    35 0000001D 7F07                                    jg end_if
    36                                                  valid: ;if 'A' <= al <= 'Z'
    37 0000001F 8882[08000000]                             mov [D + edx], al 
    38 00000025 42                                         inc edx
    39                                                  end_if:
    40 00000026 46                                      inc esi
    41 00000027 E2E8                            loop repeat_label
    42                                          end_program: ; end of the program
    43                                          ; exit(0)
    44 00000029 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    45 0000002B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
