#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <errno.h>
#include<unistd.h>
#include<time.h>
int generateNr(){
    srand(time(0));
    int x = rand() % 200 + 1;
    while(x < 50){
        x = rand() % 200 + 1;
    }
    return x;
}

int main(int argc, char** argv){
    int id, f1f2[2], f2f1[2];
    if(pipe(f1f2) == -1){
        printf("Something bad went when creating pipe 1.\n");
        return -1;
    }
    if(pipe(f2f1) == -1){
        printf("Something bad went when creating pipe 2.\n");
        return -1;
    }
    if((id = fork()) == -1){
        printf("Something bad went when creating the fork.\n");
        return -1;
    }
    if(id != 0){
        //parent process - A
        close(f1f2[0]);
        close(f2f1[1]);
        int isRunning = 1;
        int nr = generateNr();
        while(isRunning){
            if(nr % 2 == 0){
                printf("A is sending %d to B ... \n", nr);
                write(f1f2[1], &nr, sizeof(int));
                printf("A sent the message to B.\n");
            }
            else{
                printf("A is sending %d + 1 to B ... \n", nr);
                nr += 1;
                write(f1f2[1], &nr, sizeof(int));
                printf("A sent the message to B.\n");
            }
            int res;
            read(f2f1[0], &res, sizeof(int));
            printf("The result from B is %d \n", res);
            nr = res;
            if(nr < 5){
                isRunning = 0;
            }
        }
        while(wait(NULL) != -1);
        close(f1f2[1]);
        close(f2f1[0]);
    }
    else{
        //child process - B
        close(f2f1[0]);
        close(f1f2[1]);
        int isRunning = 1;
        while(isRunning){
            int nr;
            read(f1f2[0], &nr, sizeof(int));
            printf("I'm B, I got your message A!\n");
            nr /= 2;
            write(f2f1[1], &nr, sizeof(int));
            if(nr < 5){
                isRunning = 0;
            }
        }
        close(f2f1[1]);
        close(f1f2[0]);
    }
    return 0;
}